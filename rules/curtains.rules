rule "Blinds: auto command"
when
    Item blinds_auto_cmd received command
then
    // New value
    val cmd = receivedCommand.toString()

    // If enabled - command blinds
    if (ON == cfg_blinds_auto.state) {
        // Theater - skip auto modes, if Cinema mode is active
        if (ON == cfg_blinds_auto_ks.state && OFF == cinema_mode.state) {
            ks_blinds_cmd.sendCommand(cmd)
        }
        if (ON == cfg_blinds_auto_sz.state) {
            sz_blinds_cmd.sendCommand(cmd)
        }
        if (ON == cfg_blinds_auto_ku.state) {
            ku_blinds_cmd.sendCommand(cmd)
        }
    }
end

rule "Curtains: auto command"
when
    Item curtains_auto_cmd received command
then
    // New value
    val cmd = receivedCommand.toString()

    // If enabled - command blinds
    if (ON == cfg_curtains_auto.state) {
        if (ON == cfg_curtains_auto_sz.state) {
            sz_curtain_cmd.sendCommand(cmd)
        }
    }
end

// Check the current forecast and close blinds - if too heat
rule "Blinds: protect from weather"
when
    Time cron "0 00 10 ? * *"
then
    // Check, do we have some heat expected today?
    if (weather_fc_0d_temp_max.state > 28 | Â°C) {
        logWarn("blinds", "Expected today " + weather_fc_0d_temp_max.state.toString() + ", closing hard blinds")
        blinds_auto_cmd.sendCommand("close")
    }
end

// SZ Curtains: update current state var
// We dont have built-in "action" channel and we need to track mqtt channel,
// that curtains started and stopped moving
rule "SZ Curtains: moving"
when
    Item sz_curtain_cmd received command
    or Item sz_curtain_pos received command
then
    sz_curtain_state.sendCommand("move")
end

rule "SZ Curtains: stop"
when
    Channel "mqtt:topic:openhab:sz-curtain:state" triggered
then
    sz_curtain_state.sendCommand("stop")
end
