rule "Blinds: auto astro command"
when
    Item blinds_auto_astro_cmd received command
then
    // New value
    val cmd = receivedCommand.toString()

    // If enabled - command blinds
    if (ON == cfg_blinds_auto_astro.state) {
        // Theater - skip auto modes, if Cinema mode is active
        if (ON == cfg_blinds_auto_astro_ks.state && OFF == cinema_mode.state) {
            ks_blinds_cmd.sendCommand(cmd)
        }
        if (ON == cfg_blinds_auto_astro_sz.state) {
            sz_blinds_cmd.sendCommand(cmd)
        }
        if (ON == cfg_blinds_auto_astro_ku.state) {
            ku_blinds_cmd.sendCommand(cmd)
        }
    }
end

rule "Blinds: auto weather command"
when
    Item blinds_auto_weather_cmd received command
then
    // New value
    val cmd = receivedCommand.toString()

    // If enabled - command blinds
    if (ON == cfg_blinds_auto_weather.state) {
        // Theater - skip auto modes, if Cinema mode is active
        if (ON == cfg_blinds_auto_weather_ks.state && OFF == cinema_mode.state) {
            ks_blinds_cmd.sendCommand(cmd)
        }
        if (ON == cfg_blinds_auto_weather_sz.state) {
            sz_blinds_cmd.sendCommand(cmd)
        }
        if (ON == cfg_blinds_auto_weather_ku.state) {
            ku_blinds_cmd.sendCommand(cmd)
        }
    }
end

// Weather-driven control
rule "Blinds: weather watch"
when
    Item ext_climate_temperature changed
then
    // New value
    val temp_new = newState
    logInfo("blinds", "Ext temperature new: " + temp_new)

    if (temp_new >= cfg_blinds_auto_weather_close.state) {
        if (blinds_auto_weather_cmd.state != "close") {
            logInfo("blinds", "Weather monitor: to close")
            blinds_auto_weather_cmd.sendCommand("close")
        }
    }
    if (temp_new <= cfg_blinds_auto_weather_open.state) {
        if (blinds_auto_weather_cmd.state != "open") {
            logInfo("blinds", "Weather monitor: to open")
            blinds_auto_weather_cmd.sendCommand("open")
        }
    }
end

rule "Curtains: auto command"
when
    Item curtains_auto_cmd received command
then
    // New value
    val cmd = receivedCommand.toString()

    // If enabled - command blinds
    if (ON == cfg_curtains_auto.state) {
        if (ON == cfg_curtains_auto_sz.state) {
            sz_curtain_cmd.sendCommand(cmd)
        }
    }
end

// SZ Curtains: update current state var
// We dont have built-in "action" channel and we need to track mqtt channel,
// that curtains started and stopped moving
rule "SZ Curtains: moving"
when
    Item sz_curtain_cmd received command
    or Item sz_curtain_pos received command
then
    sz_curtain_state.sendCommand("move")
end

rule "SZ Curtains: stop"
when
    Channel "mqtt:topic:openhab:sz-curtain:state" triggered
then
    sz_curtain_state.sendCommand("stop")
end
