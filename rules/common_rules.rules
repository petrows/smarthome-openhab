import java.time.temporal.ChronoUnit

var Timer gartenTimer

rule "System started"
when
    System started
then
    presAll.sendCommand(OFF) // assume no one is home on startup
    presBlePeter.sendCommand(OFF)
    presBleMarina.sendCommand(OFF)
    presMobilePeter.sendCommand(OFF)
    presMobileMarina.sendCommand(OFF)
end

rule "Presence master"
when
	Item gPresent changed
then
	if (ON != cfgPersistanceEnable.state) {
		logInfo("presence", "Presence disabled")
		return
	}

	logInfo("presence", "Presence master: " + gPresent.state)

	if (ON == gPresent.state)
	{
		presAll.sendCommand(ON)
	} else {
		presAll.sendCommand(OFF)
	}
end

rule "Waterleak LG 4"
when
	Item kg_lager4_leak_leak changed to ON
then
	sendBroadcastNotification("WATER LEAK IN KG 4!")
	logWarn("water-leak", "WATER LEAK IN KG 4!")

    val telegramAction = getActions("telegram","telegram:telegramBot:PWS_Notification")
    telegramAction.sendTelegram("WATER LEAK IN KG 4!")
end

rule "Waterleak LG 3"
when
	Item garten_wasser_leak_leak changed to ON
then
	sendBroadcastNotification("WATER LEAK IN KG 2!")
	logWarn("water-leak", "WATER LEAK IN KG 2!")

    // Disable auto wasser
    cfg_wassering_auto_enable.sendCommand(OFF)
    garten_wasser_sw.sendCommand(OFF)

    val telegramAction = getActions("telegram","telegram:telegramBot:PWS_Notification")
    telegramAction.sendTelegram("WATER LEAK IN KG 2!")
end

// This rule send notifications if item was not updated within 24 hrs
rule "Test devices responce time"
when
    Time cron "0 00 13 ? * *"
then
	g_device_activity.members.forEach [s |
        if (s.state != NULL) {
            val date_item = ( s.state as DateTimeType).zonedDateTime
            val date_now = ZonedDateTime.now

            var double diff_hours = ChronoUnit.HOURS.between(date_item, date_now)

            logInfo("activity", "Item " + s.label + " last update: " + diff_hours)

            if (diff_hours > 24) {
                sendBroadcastNotification("Item " + s.label + " no activity for " + diff_hours + " h")

                val telegramAction = getActions("telegram","telegram:telegramBot:PWS_Notification")
                telegramAction.sendTelegram("Item " + s.label + " no activity for " + diff_hours + " h")
            }
        } else {
            logInfo("activity", "Item " + s.label + " never updated")
        }
    ]
end

// Control Fridge for beer
rule "Fridge start at friday"
when
    Time cron "0 00 00 ? * FRI"
then
    logInfo("common", "Beer Fridge start")
	snf_kg_ks_power.sendCommand(ON)
end

rule "Fridge stop at sunday"
when
    Time cron "0 00 00 ? * SUN"
then
    logInfo("common", "Beer Fridge stop")
	snf_kg_ks_power.sendCommand(OFF)
end

// Temperature logging
rule "Climate: today stat reset"
when
    Time cron "0 00 00 ? * *"
then
    logInfo("common", "Reset today climate vars")
	weather_today_temp_max.sendCommand(ext_climate_temperature.state as Number)
	weather_today_temp_min.sendCommand(ext_climate_temperature.state as Number)
end

rule "Climate: today stat set"
when
    Item ext_climate_temperature changed
then
    val Number tempCurrent = ext_climate_temperature.state as Number
    if (weather_today_temp_max.state < tempCurrent) {
	    weather_today_temp_max.sendCommand(tempCurrent)
    }
    if (weather_today_temp_min.state > tempCurrent) {
	    weather_today_temp_min.sendCommand(tempCurrent)
    }
end

// Garten water
rule "Garten water on"
when
    Time cron "0 00 05 ? * *"
then
    // Master switch
    if (cfg_wassering_auto_enable.state == OFF) {
        logInfo("common", "Garten wasser disabled")
        return
    }

    // Decide wassering time from month number
    val currMonth = now.getMonthValue()
    var workTimeMinutes = 10

    switch (currMonth) {
        case 1,
        case 2,
        case 12: {
            // Winter
            workTimeMinutes = 5
        }
        case 3,
        case 4,
        case 5: {
            // Spring
            workTimeMinutes = 20
        }
        case 6,
        case 7,
        case 8: {
            // Summer
            workTimeMinutes = 25
        }
        case 9,
        case 10,
        case 11: {
            // Autumn
            workTimeMinutes = 10
        }
    }
    // Start it
    logInfo("common", "Garten wasser start, time is {}", workTimeMinutes)
	garten_wasser_sw.sendCommand(ON)
    // Plan stop
    gartenTimer = createTimer(now.plusMinutes(workTimeMinutes), [ |
        logInfo("common", "Garten wasser stop")
        garten_wasser_sw.sendCommand(OFF)
        Thread::sleep(1000)
        garten_wasser_sw.sendCommand(OFF)
    ])
end

rule "Garten water on (everning)"
when
    Time cron "0 00 21 ? * *"
then
    // Master switch
    if (cfg_wassering_auto_enable.state == OFF) {
        logInfo("common", "Garten wasser disabled")
        return
    }

    if (weather_today_temp_max.state < 25 | "Â°C") {
        logInfo("common", "Garten wasser everning not required, max temp was {}", weather_today_temp_max.state)
        return
    }
    logInfo("common", "Garten wasser everning is required, max temp was {}", weather_today_temp_max.state)
    garten_wasser_sw.sendCommand(ON)
    gartenTimer = createTimer(now.plusMinutes(10), [ |
        logInfo("common", "Garten wasser stop")
        garten_wasser_sw.sendCommand(OFF)
        Thread::sleep(1000)
        garten_wasser_sw.sendCommand(OFF)
    ])
end
