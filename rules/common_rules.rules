import java.time.temporal.ChronoUnit

rule "System started"
when
    System started
then
    presAll.sendCommand(OFF) // assume no one is home on startup
    presBlePeter.sendCommand(OFF)
    presBleMarina.sendCommand(OFF)
    presMobilePeter.sendCommand(OFF)
    presMobileMarina.sendCommand(OFF)
end

rule "Presence master"
when
	Item gPresent changed
then
	if (ON != cfgPersistanceEnable.state) {
		logInfo("presence", "Presence disabled")
		return
	}

	logInfo("presence", "Presence master: " + gPresent.state)

	if (ON == gPresent.state)
	{
		presAll.sendCommand(ON)
	} else {
		presAll.sendCommand(OFF)
	}
end

rule "Waterleak"
when
	Item kg_water_leak_1 changed to ON
then
	sendBroadcastNotification("WATER LEAK IN KG!")
	logWarn("water-leak", "WATER LEAK IN KG!")
end

// This rule send notifications if item was not updated within 24 hrs
rule "Test devices responce time"
when
    Time cron "0 00 13 ? * *"
	or Item test_sw_check_activity received command
then
	g_zigbee_activity.members.forEach [s |
        if (s.state != NULL) {
            val date_item = ( s.state as DateTimeType).zonedDateTime
            val date_now = ZonedDateTime.now

            var double diff_hours = ChronoUnit.HOURS.between(date_item, date_now)

            logInfo("activity", "Item " + s.label + " last update: " + diff_hours)

            if (diff_hours > 24) {
                sendBroadcastNotification("Item " + s.label + " no activity for " + diff_hours + " h")
            }
        } else {
            logInfo("activity", "Item " + s.label + " never updated")
        }
    ]
end

// Control Fridge for beer
rule "Fridge start at friday"
when
    Time cron "0 00 00 ? * FRI"
then
    logInfo("common", "Beer Fridge start")
	snf_kg_ks_power.sendCommand(ON)
end

rule "Fridge stop at sunday"
when
    Time cron "0 00 00 ? * SUN"
then
    logInfo("common", "Beer Fridge stop")
	snf_kg_ks_power.sendCommand(OFF)
end
