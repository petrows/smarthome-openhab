
rule "Cinema ON"
when
	Item cinema_mode changed to ON
then
	logWarn("cinema", "Cinema mode: ON")

    // Close blinds
    g_blinds_ns_cmd.sendCommand("close")

    // Turn ON support light
    val mq = getActions("mqtt","mqtt:broker:openhab")
    mq.publishMQTT("zigbee2mqtt/ns_night_lamp/set","{\"color\":{\"r\":255,\"g\":0,\"b\":0}, \"brightness\":254}")

    // Turn ON master power
    ns_projector_power_sw.sendCommand(ON)

    // Turn on devices
    Thread::sleep(10000)
    ir_projector_power.sendCommand(ON)
    ir_audio_power.sendCommand(ON)
    // ir_stb_power.sendCommand(ON) // STB stay on on power

    // Turn OFF light except Kino
    mq.publishMQTT("zigbee2mqtt/ns_night_lamp/set","{\"brightness\":0, \"transition\": 20}")
    all_light.members.forEach [s |
        if (s == ns_night_lamp_sw) {
            // ns_night_lamp_dim.sendCommand(1)
        } else {
            s.sendCommand(OFF)
        }
    ]

    // When all ON, we can finally turn off all lights
    Thread::sleep(21000)
    all_light.sendCommand(OFF)
end

rule "Cinema OFF"
when
	Item cinema_mode changed to OFF
then
	logWarn("cinema", "Cinema mode: OFF")

    // Open blinds
    g_blinds_ns_cmd.sendCommand("open")

    // Turn on light
    // Very slow transition
    val mq = getActions("mqtt","mqtt:broker:openhab")
    mq.publishMQTT("zigbee2mqtt/ns_night_lamp/set","{\"brightness\":1}")
    mq.publishMQTT("zigbee2mqtt/ns_night_lamp/set","{\"color\":{\"r\":255,\"g\":0,\"b\":0}}")
    mq.publishMQTT("zigbee2mqtt/ns_night_lamp/set","{\"brightness\":254, \"transition\": 20}")

    // Turn off devices
    Thread::sleep(1000)
    ir_projector_power.sendCommand(ON)
    Thread::sleep(1000)
    ir_projector_power.sendCommand(ON) // "Press again to turn off"

    ir_audio_power.sendCommand(ON)
    ir_stb_power.sendCommand(ON)

    Thread::sleep(20000)
    // Turn OFF master power
    ns_projector_power_sw.sendCommand(OFF)
end

