
// ==========================================
// THIS FILE IS AUTO GENERATED
// Do not edit by hands
// Use this command to regenerate:
// python3 ./bin/codegen.py
// ==========================================


var Timer bk_light_1_ct_timer
var Timer bz_light_1_ct_timer
var Timer bz_light_2_ct_timer
var Timer ns_main_light_ct_timer
var Timer wz_main_light_ct_timer
var Timer wz_color_light_ct_timer
var Timer sz_main_light_ct_timer
var Timer sz_bed_light_l_ct_timer
var Timer sz_bed_light_r_ct_timer
var Timer treppe_up_light_ct_timer
var Timer treppe_down_light_ct_timer
var Timer desktop_petro_up_light_1_ct_timer
var Timer desktop_petro_up_light_2_ct_timer
var Timer desktop_petro_up_light_3_ct_timer
var Timer desktop_petro_light_ct_timer
// ----------------------------
// Device should apply saved color temp when ON
rule "Balkon light 1 apply color on ON"
when
    Item bk_light_1_sw changed to ON
then
    val ct_set = (bk_light_1_ct.state as Number).intValue
    bk_light_1_ct_timer = createTimer(now.plusSeconds(1), [ |
        bk_light_1_ct.sendCommand(ct_set)
    ])
end
// Device should apply saved color temp when ON
rule "BZ Light (toilet) apply color on ON"
when
    Item bz_light_1_sw changed to ON
then
    val ct_set = (bz_light_1_ct.state as Number).intValue
    bz_light_1_ct_timer = createTimer(now.plusSeconds(1), [ |
        // Item with RGB: do not reset RGB color while ON
        if (bz_light_1_color_mode.state == "xy") {
            return
        }
        bz_light_1_ct.sendCommand(ct_set)
    ])
end
// Device needs to proxy events from groups, to filter duplicating
rule "BZ Light (toilet) proxy state item"
when
    Item bz_light_1_sw changed
then
    if (bz_light_1_sw_proxy.state != newState) {
        bz_light_1_sw_proxy.postUpdate(newState)
    }
end
rule "BZ Light (toilet) proxy state group"
when
    Item bz_light_1_sw_proxy received command
then
    if (bz_light_1_sw.state != receivedCommand) {
        bz_light_1_sw.sendCommand(receivedCommand)
    } else {
        logWarn("proxy", "Filter state for item bz_light_1")
        // Send request for status - to ensure we are in sync
        val mq = getActions("mqtt","mqtt:broker:openhab")
        mq.publishMQTT("zigbee2mqtt/bz_light_1/get","{\"state\":\"\"}")
    }
end
// Device should apply saved color temp when ON
rule "BZ Light (shower) apply color on ON"
when
    Item bz_light_2_sw changed to ON
then
    val ct_set = (bz_light_2_ct.state as Number).intValue
    bz_light_2_ct_timer = createTimer(now.plusSeconds(1), [ |
        // Item with RGB: do not reset RGB color while ON
        if (bz_light_2_color_mode.state == "xy") {
            return
        }
        bz_light_2_ct.sendCommand(ct_set)
    ])
end
// Device needs to proxy events from groups, to filter duplicating
rule "BZ Light (shower) proxy state item"
when
    Item bz_light_2_sw changed
then
    if (bz_light_2_sw_proxy.state != newState) {
        bz_light_2_sw_proxy.postUpdate(newState)
    }
end
rule "BZ Light (shower) proxy state group"
when
    Item bz_light_2_sw_proxy received command
then
    if (bz_light_2_sw.state != receivedCommand) {
        bz_light_2_sw.sendCommand(receivedCommand)
    } else {
        logWarn("proxy", "Filter state for item bz_light_2")
        // Send request for status - to ensure we are in sync
        val mq = getActions("mqtt","mqtt:broker:openhab")
        mq.publishMQTT("zigbee2mqtt/bz_light_2/get","{\"state\":\"\"}")
    }
end
// Device should apply saved color temp when ON
rule "NS Main apply color on ON"
when
    Item ns_main_light_sw changed to ON
then
    val ct_set = (ns_main_light_ct.state as Number).intValue
    ns_main_light_ct_timer = createTimer(now.plusSeconds(1), [ |
        ns_main_light_ct.sendCommand(ct_set)
    ])
end
// Device should apply saved color temp when ON
rule "SZ Main apply color on ON"
when
    Item wz_main_light_sw changed to ON
then
    val ct_set = (wz_main_light_ct.state as Number).intValue
    wz_main_light_ct_timer = createTimer(now.plusSeconds(1), [ |
        wz_main_light_ct.sendCommand(ct_set)
    ])
end
// Device should apply saved color temp when ON
rule "WZ Color Decor apply color on ON"
when
    Item wz_color_light_sw changed to ON
then
    val ct_set = (wz_color_light_ct.state as Number).intValue
    wz_color_light_ct_timer = createTimer(now.plusSeconds(1), [ |
        // Item with RGB: do not reset RGB color while ON
        if (wz_color_light_color_mode.state == "xy") {
            return
        }
        wz_color_light_ct.sendCommand(ct_set)
    ])
end
// Device needs to proxy events from groups, to filter duplicating
rule "WZ Color Decor proxy state item"
when
    Item wz_color_light_sw changed
then
    if (wz_color_light_sw_proxy.state != newState) {
        wz_color_light_sw_proxy.postUpdate(newState)
    }
end
rule "WZ Color Decor proxy state group"
when
    Item wz_color_light_sw_proxy received command
then
    if (wz_color_light_sw.state != receivedCommand) {
        wz_color_light_sw.sendCommand(receivedCommand)
    } else {
        logWarn("proxy", "Filter state for item wz_color_light")
        // Send request for status - to ensure we are in sync
        val mq = getActions("mqtt","mqtt:broker:openhab")
        mq.publishMQTT("zigbee2mqtt/wz_color_light/get","{\"state\":\"\"}")
    }
end
// Device should apply saved color temp when ON
rule "SZ Main apply color on ON"
when
    Item sz_main_light_sw changed to ON
then
    val ct_set = (sz_main_light_ct.state as Number).intValue
    sz_main_light_ct_timer = createTimer(now.plusSeconds(1), [ |
        sz_main_light_ct.sendCommand(ct_set)
    ])
end
// Device should apply saved color temp when ON
rule "SZ Bed L apply color on ON"
when
    Item sz_bed_light_l_sw changed to ON
then
    val ct_set = (sz_bed_light_l_ct.state as Number).intValue
    sz_bed_light_l_ct_timer = createTimer(now.plusSeconds(1), [ |
        sz_bed_light_l_ct.sendCommand(ct_set)
    ])
end
// Device should apply saved color temp when ON
rule "SZ Bed R apply color on ON"
when
    Item sz_bed_light_r_sw changed to ON
then
    val ct_set = (sz_bed_light_r_ct.state as Number).intValue
    sz_bed_light_r_ct_timer = createTimer(now.plusSeconds(1), [ |
        sz_bed_light_r_ct.sendCommand(ct_set)
    ])
end
// Device should apply saved color temp when ON
rule "Treppe Up light apply color on ON"
when
    Item treppe_up_light_sw changed to ON
then
    val ct_set = (treppe_up_light_ct.state as Number).intValue
    treppe_up_light_ct_timer = createTimer(now.plusSeconds(1), [ |
        treppe_up_light_ct.sendCommand(ct_set)
    ])
end
// Device should apply saved color temp when ON
rule "Treppe Down light apply color on ON"
when
    Item treppe_down_light_sw changed to ON
then
    val ct_set = (treppe_down_light_ct.state as Number).intValue
    treppe_down_light_ct_timer = createTimer(now.plusSeconds(1), [ |
        // Item with RGB: do not reset RGB color while ON
        if (tr_down_light_color_mode.state == "xy") {
            return
        }
        treppe_down_light_ct.sendCommand(ct_set)
    ])
end
// Device needs to proxy events from groups, to filter duplicating
rule "Treppe Down light proxy state item"
when
    Item treppe_down_light_sw changed
then
    if (treppe_down_light_sw_proxy.state != newState) {
        treppe_down_light_sw_proxy.postUpdate(newState)
    }
end
rule "Treppe Down light proxy state group"
when
    Item treppe_down_light_sw_proxy received command
then
    if (treppe_down_light_sw.state != receivedCommand) {
        treppe_down_light_sw.sendCommand(receivedCommand)
    } else {
        logWarn("proxy", "Filter state for item treppe_down_light")
        // Send request for status - to ensure we are in sync
        val mq = getActions("mqtt","mqtt:broker:openhab")
        mq.publishMQTT("zigbee2mqtt/treppe_down_light/get","{\"state\":\"\"}")
    }
end
// Device should apply saved color temp when ON
rule "Petro Desktop up light 1 apply color on ON"
when
    Item desktop_petro_up_light_1_sw changed to ON
then
    val ct_set = (desktop_petro_up_light_1_ct.state as Number).intValue
    desktop_petro_up_light_1_ct_timer = createTimer(now.plusSeconds(1), [ |
        desktop_petro_up_light_1_ct.sendCommand(ct_set)
    ])
end
// Device should apply saved color temp when ON
rule "Petro Desktop up light 2 apply color on ON"
when
    Item desktop_petro_up_light_2_sw changed to ON
then
    val ct_set = (desktop_petro_up_light_2_ct.state as Number).intValue
    desktop_petro_up_light_2_ct_timer = createTimer(now.plusSeconds(1), [ |
        desktop_petro_up_light_2_ct.sendCommand(ct_set)
    ])
end
// Device should apply saved color temp when ON
rule "Petro Desktop up light 3 apply color on ON"
when
    Item desktop_petro_up_light_3_sw changed to ON
then
    val ct_set = (desktop_petro_up_light_3_ct.state as Number).intValue
    desktop_petro_up_light_3_ct_timer = createTimer(now.plusSeconds(1), [ |
        desktop_petro_up_light_3_ct.sendCommand(ct_set)
    ])
end
// Device should apply saved color temp when ON
rule "Petro Desktop light apply color on ON"
when
    Item desktop_petro_light_sw changed to ON
then
    val ct_set = (desktop_petro_light_ct.state as Number).intValue
    desktop_petro_light_ct_timer = createTimer(now.plusSeconds(1), [ |
        desktop_petro_light_ct.sendCommand(ct_set)
    ])
end
