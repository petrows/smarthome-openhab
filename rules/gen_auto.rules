
// ==========================================
// THIS FILE IS AUTO GENERATED
// Do not edit by hands
// Use this command to regenerate:
// python3 ./bin/codegen.py
// ==========================================


var Timer balkon_light_1_ct_timer
var Timer bz_light_1_ct_timer
var Timer bz_light_2_ct_timer
var Timer desktop_marina_light_ct_timer
var Timer treppe_up_light_ct_timer
var Timer treppe_down_light_ct_timer
var Timer desktop_petro_up_light_1_ct_timer
var Timer desktop_petro_up_light_2_ct_timer
var Timer desktop_petro_up_light_3_ct_timer
var Timer desktop_petro_light_ct_timer

// Device should apply saved color temp when ON
rule "Balkon light 1 apply color on ON"
when
    Item balkon_light_1_sw changed to ON
then
    val ct_set = (balkon_light_1_ct.state as Number).intValue
    balkon_light_1_ct_timer = createTimer(now.plusSeconds(1), [ |
        balkon_light_1_ct.sendCommand(ct_set)
    ])
end


// Device should apply saved color temp when ON
rule "BZ Light (toilet) apply color on ON"
when
    Item bz_light_1_sw changed to ON
then
    val ct_set = (bz_light_1_ct.state as Number).intValue
    bz_light_1_ct_timer = createTimer(now.plusSeconds(1), [ |
        bz_light_1_ct.sendCommand(ct_set)
    ])
end


// Device should apply saved color temp when ON
rule "BZ Light (shower) apply color on ON"
when
    Item bz_light_2_sw changed to ON
then
    val ct_set = (bz_light_2_ct.state as Number).intValue
    bz_light_2_ct_timer = createTimer(now.plusSeconds(1), [ |
        bz_light_2_ct.sendCommand(ct_set)
    ])
end


// Device should apply saved color temp when ON
rule "Marina Desktop light apply color on ON"
when
    Item desktop_marina_light_sw changed to ON
then
    val ct_set = (desktop_marina_light_ct.state as Number).intValue
    desktop_marina_light_ct_timer = createTimer(now.plusSeconds(1), [ |
        desktop_marina_light_ct.sendCommand(ct_set)
    ])
end


// Device should apply saved color temp when ON
rule "Treppe Up light apply color on ON"
when
    Item treppe_up_light_sw changed to ON
then
    val ct_set = (treppe_up_light_ct.state as Number).intValue
    treppe_up_light_ct_timer = createTimer(now.plusSeconds(1), [ |
        treppe_up_light_ct.sendCommand(ct_set)
    ])
end


// Device should apply saved color temp when ON
rule "Treppe Down light apply color on ON"
when
    Item treppe_down_light_sw changed to ON
then
    val ct_set = (treppe_down_light_ct.state as Number).intValue
    treppe_down_light_ct_timer = createTimer(now.plusSeconds(1), [ |
        treppe_down_light_ct.sendCommand(ct_set)
    ])
end


// Device should apply saved color temp when ON
rule "Petro Desktop up light 1 apply color on ON"
when
    Item desktop_petro_up_light_1_sw changed to ON
then
    val ct_set = (desktop_petro_up_light_1_ct.state as Number).intValue
    desktop_petro_up_light_1_ct_timer = createTimer(now.plusSeconds(1), [ |
        desktop_petro_up_light_1_ct.sendCommand(ct_set)
    ])
end


// Device should apply saved color temp when ON
rule "Petro Desktop up light 2 apply color on ON"
when
    Item desktop_petro_up_light_2_sw changed to ON
then
    val ct_set = (desktop_petro_up_light_2_ct.state as Number).intValue
    desktop_petro_up_light_2_ct_timer = createTimer(now.plusSeconds(1), [ |
        desktop_petro_up_light_2_ct.sendCommand(ct_set)
    ])
end


// Device should apply saved color temp when ON
rule "Petro Desktop up light 3 apply color on ON"
when
    Item desktop_petro_up_light_3_sw changed to ON
then
    val ct_set = (desktop_petro_up_light_3_ct.state as Number).intValue
    desktop_petro_up_light_3_ct_timer = createTimer(now.plusSeconds(1), [ |
        desktop_petro_up_light_3_ct.sendCommand(ct_set)
    ])
end


// Device should apply saved color temp when ON
rule "Petro Desktop light apply color on ON"
when
    Item desktop_petro_light_sw changed to ON
then
    val ct_set = (desktop_petro_light_ct.state as Number).intValue
    desktop_petro_light_ct_timer = createTimer(now.plusSeconds(1), [ |
        desktop_petro_light_ct.sendCommand(ct_set)
    ])
end
