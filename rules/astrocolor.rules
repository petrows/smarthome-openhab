import org.openhab.core.model.script.ScriptServiceUtil

// Light color sunset emulation

import java.time.temporal.ChronoUnit

// === Configuration

// How long full programm runs (seconds): 4 hrs from 18 to 22
// Update: 2 hrs from Sunset

val astrocolorProgramPeriod = 2 * 60 * 60

// Default color value to be set for DAY
val astrocolorDaylight = 30

// Persentage to be change on each step
// Inrease this value to reduce command traffic, decrease for better smooth

val astrocolorProgramPeriodStep = 1.0

// === Configuration

// Global vars
var Timer astrocolorTimer
var astrocolorSteps = 0.0
var astrocolorValue = 0.0
var astrocolorTimerMs = 0.0

rule "Astrocolor: Reset lamps state"
when
    Time cron "0 00 05 ? * *"
then
    logWarn("light", "Astrocolor reset")

    light_astrocolor_enabled.sendCommand(ON)
    astro_color_value.sendCommand(astrocolorDaylight) // Default color value for DAY
end

rule "Astrocolor: Set lamps color according to daytime"
when
    // Time cron "0 00 18 ? * *"
    // Sunset (early)
    Channel "astro:sun:home:set#event" triggered START
then
    logWarn("light", "Astrocolor emulation started")

    if (light_astrocolor_enabled.state == OFF) {
        logWarn("light", "Astrocolor emulation disabled")
        return
    }

    // On start, read current value from group and use it as "start value"
    // We dont want to start awlays from "very cold"
    astrocolorValue = Math.round((g_light_astro_color.state as DecimalType).doubleValue)
    // How much Persent we should move to reach 100%
    astrocolorSteps = 100.0 - astrocolorValue
    // Calculate timer
    astrocolorTimerMs = ((astrocolorProgramPeriod as double) * 1000.0) / (astrocolorSteps / astrocolorProgramPeriodStep)

    logInfo("light", "Astrocolor config: Initital value " + astrocolorValue + ", timer " + astrocolorTimerMs + " ms")

    astrocolorTimer = createTimer(now, [ |

        if (light_astrocolor_enabled.state == OFF) {
            logWarn("light", "Astrocolor emulation disabled")
            return
        }

        logInfo("light", "Astrocolor set color: " + astrocolorValue)

        astro_color_value.sendCommand(astrocolorValue)

        // All items 100% ?
        if (astrocolorValue >= 100) {
            logWarn("light", "Astrocolor emulation done")
        } else {
            // New timer loop
            astrocolorValue = astrocolorValue + astrocolorProgramPeriodStep
            astrocolorTimer.reschedule(ZonedDateTime.now.plus(astrocolorTimerMs.intValue, ChronoUnit.MILLIS))
        }
    ])
end

rule "Astrocolor: apply"
when
    Item astro_color_value received update
then
    // g_light_astro_color.sendCommand(newState.toString())
    // Iterate group and find devices with color mode == OFF (skip RGB lamps to change)
    g_light_astro_color.members.forEach [itm |
        // Check that item satellite 'color_mode' exists
        val itm_name = transform("REGEX", "(.*)_ct", itm.name.toString)
        var itm_allow_astrocolor = true
        try {
            val StringItem itm_color_mode = ScriptServiceUtil.getItemRegistry?.getItem(itm_name + "_color_mode") as StringItem
            if (itm_color_mode.state == "xy") {
                logInfo("light", "Astrocolor: skip device due to RGB mode: " + itm_name)
                itm_allow_astrocolor = false
            }
        } catch(Throwable t) {
            // Nothing
        }

        if (itm_allow_astrocolor) {
            itm.sendCommand(newState.toString())
        }
    ]
end
