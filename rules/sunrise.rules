// Sinrise emulation

import java.time.temporal.ChronoUnit
import org.openhab.core.model.script.ScriptServiceUtil

// === Configuration

// How long full programm runs (seconds)

val sunriseBrightPeriod = 60 * 60

// Persentage to be change on each step
// Inrease this value to reduce command traffic, decrease for better smooth

val sunriseBrightPeriodStep = 1

// Persentage, when CT starts to set (0 - begin, 1 - end)

val sunriseCTStart = 0.6

// === Configuration

// Global vars
var Timer sunriseTimer
var sunriseStarted = false
var sunriseBrightness = 0
var sunriseModeValue = 0

rule "Sunrise emulation auto off"
when
    Channel "astro:sun:home:daylight#event" triggered START
then
    logWarn("light", "Sunrise emulation daylight switch off")

    if (sunrise_enable.state == OFF) {
        logWarn("light", "Sunrise emulation disabled")
        return
    }

    sz_light.sendCommand(OFF)
end

rule "Sunrise emulation start"
when
    Time cron "0 00 05 ? * *"
    or Item test_sw_check_sunrize received update
then
    logWarn("light", "Sunrise emulation started")

    if (sunrise_enable.state == OFF) {
        logWarn("light", "Sunrise emulation disabled")
        return
    }

    sunriseBrightness = 0;
    sunriseStarted = false;

    sunriseTimer = createTimer(now, [ |

        // Items to set ON
        // Direct usage of group is problematic, because openHab do not keeps items order
        // We do not use groups, we must have exact order of lamps defined
        // Device MUST have pair of _sw and _dim items!
        var lightGroupItems = newArrayList(
            "eg_flur_light",
            "sz_bed_light_l",
            "sz_bed_light_2",
            "sz_up_light"
        )

        if (sunriseStarted) {
            // Check that we have at least one lamp ON
            var lamps_on = false

            for (itemName: lightGroupItems) {
                try {
                    val SwitchItem item = ScriptServiceUtil.getItemRegistry?.getItem(itemName + "_sw") as SwitchItem
                    if (item.state == ON) {
                        lamps_on = true
                    }
                } catch(Throwable t) {
                    logError("light", "Sunrise: unable to get switch for " + itemName)
                }
            }

            if (!lamps_on) {
                logWarn("light", "Sunrise emulation stopped: group switched off")
                return
            }
            if (sunrise_enable.state == OFF) {
                logWarn("light", "Sunrise emulation disabled")
                return
            }
        }

        sunriseStarted = true

        // Calculate timer
        var brightTimerMs = (sunriseBrightPeriod * 1000) / ( (100 / sunriseBrightPeriodStep) * lightGroupItems.size)

        sunriseModeValue = sunriseBrightness

        // Overall progress for scenario (0..1)
        val brightnessAllProgress = (sunriseBrightness as float) / (lightGroupItems.size * 100.0)

        // Detect start of CT
        var sunriseCTProgress = 0.0
        if (brightnessAllProgress > sunriseCTStart) {
            // Detect current percecntage for CT
            sunriseCTProgress = (brightnessAllProgress - sunriseCTStart) / (1.0 - sunriseCTStart)
        }

        lightGroupItems.forEach [s |

            var setBright = sunriseModeValue
            sunriseModeValue = sunriseModeValue - 100

            // If current bright position out of range - we should check other item
            if (setBright < 0 || setBright > 100) {
                return
            }

            logWarn("light", "Sunrise item " + s + " -> " + setBright + " (" + brightnessAllProgress + ")")
            sendCommand(s + "_sw", "ON")
            sendCommand(s + "_dim", setBright.toString())
        ]

        // Update CT (in reverse 100 -> 0)
        sunrise_ct.sendCommand((100 - (sunriseCTProgress * 100)).toString())

        // All items 100% ?
        if (brightnessAllProgress >= 1) {
            logWarn("light", "Sunrise emulation done")
        } else {
            // New timer loop
            sunriseBrightness = sunriseBrightness + sunriseBrightPeriodStep
            sunriseTimer.reschedule(ZonedDateTime.now.plus(brightTimerMs, ChronoUnit.MILLIS))
        }
    ])
end
