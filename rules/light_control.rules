import java.util.concurrent.locks.ReentrantLock
val ReentrantLock lock  = new ReentrantLock()

var Boolean nachtModeTest = false
var Boolean in_bz_rule = false

rule "Ligth master mode"
when
    Item all_light_mode received command
then
    switch (receivedCommand) {
        case "ON": {
            all_light.sendCommand(ON)
        }
        case "OFF": {
            all_light.sendCommand(OFF)
        }
        case "N": {
            all_light.members.forEach [s |
                if (s != sz_declamp_1_sw) {
                    s.sendCommand(OFF)
                }
            ]
            sz_declamp_1_dim.sendCommand(1)
        }
    }
end

rule "Ligth master mode status"
when
    Item all_light received update
then
    switch (all_light.state) {
        case OFF: {
            all_light_mode.postUpdate("OFF")
        }
        case ON: {
            nachtModeTest = true

            // Check if any light is ON and NOT in night group -> no night mode
            all_light.members.forEach [s |
                if (s.state == ON && !s.getGroupNames.contains("sz_light_night")) {
                    nachtModeTest = false
                }
            ]

            if (nachtModeTest) {
                all_light_mode.postUpdate("N")
            } else {
                all_light_mode.postUpdate("ON")
            }
        }
    }
end

rule "Christmas lights off"
when
	Time cron "0 00 00 ? * *"
then
    logWarn("light", "Decorative light off")

    // Stop decorative lights
    if (cfg_christmas_lights_enable.state == ON) {
        g_light_christmas.sendCommand(OFF)
    }
end

rule "Light safe switch"
when
	Time cron "0 00 03,04 ? * *"
then
	logWarn("light", "Set safe off")

	all_light.sendCommand(OFF)

    // Stop decorative lights
    if (cfg_christmas_lights_enable.state == ON) {
        g_light_christmas.sendCommand(OFF)
    }

    // Stop projector
    ns_projector_power_sw.sendCommand(OFF)

    // Check that PC is off and turn off also sockets there
    desktop_petro_power_try.sendCommand(OFF)
end


rule "KG safe switch"
when
	Time cron "0 00 00,01,02 ? * *"
then
	logWarn("light", "Set safe off (KG version)")

    // All light in KG off
	kg_light.sendCommand(OFF)

    // Stop decorative lights
    g_light_christmas.sendCommand(OFF)

    // Check that PC is off and turn off also sockets there
    desktop_petro_power_try.sendCommand(OFF)
end

// Christmas lights auto
rule "Sunset Rule"
when
    Channel "astro:sun:home:civilDusk#event" triggered START
then
    logWarn("light", "Sunset Rule")

    if (cfg_christmas_lights_enable.state == ON) {
        g_light_christmas.sendCommand(ON)
    }
end

// PC turned off -> trigger offline check
rule "PC desktop offline"
when
    Item g_online_petro changed from ON to OFF
then
    logWarn("light", "Petro desktop offline")
    desktop_petro_power_try.sendCommand(OFF)
end

// Petro desktop power control
rule "Petro desktop power"
when
    Item desktop_petro_power_try received update
then
    logWarn("light", "Petro desktop power: " + newState)

    if (newState == ON) {
        desktop_petro_pc_power.sendCommand(ON)
        return
    }

    if (newState == OFF) {
        createTimer(now.plusSeconds(300), [|
            logWarn("light", "Petro delayed power off check, PC status is " + g_online_petro.state)
            if (g_online_petro.state == ON) {
                desktop_petro_power_try.setState(ON) // Decline state change
                return
            }
            desktop_petro_pc_power.sendCommand(OFF)
        ])
        return
    }
end

// KG light hooks

rule "KG Treppe light changed"
when
    Item g_light_treppe changed
then
    // If KG Treppe light is OFF -> Stop manual override (if active)
    if (newState == OFF) {
        treppe_manual_sw.sendCommand(OFF)
    }
end

rule "KG Lager light changed"
when
    Item g_light_lager_auto changed
then
    // If KG Lager light is OFF -> Stop manual override (if active)
    if (newState == OFF) {
        kg_lager4_manual_sw.sendCommand(OFF)
    }
end

rule "KU Arbeitlicht switch"
when
    Item ku_light_switch_arbeit_sw received update
then
    ku_light_arbeitplatte_sw.sendCommand(newState.toString())
end

// BZ: Mirror should follow main light

// rule "BZ mirror light follow main"
// when
//     Item bz_light_sw changed
// then
//     bz_mirror.sendCommand(newState.toString())
// end

// Apply auto brightness on ON for light in corridor
// bright at day, dimmed at night
rule "Corridor auto brightness"
when
    Item eg_flur_light_sw changed from OFF to ON
then
    // Take sun elevation as source
    var elev = (astro_sun_el.state as Number).doubleValue
    var brt = 100
    // Configure limits for transition period
    val elev_max = 10
    val elev_min = 0

    if (elev > elev_max) {
        // Day mode
        brt = 100
    } else if (elev > elev_min) {
        // Everning mode
        // Calculate current transition
        var elev_size = elev_max - elev_min
        var elev_corrected = elev - elev_min
        brt = ((elev_corrected / elev_size) * 100.0).intValue
    } else {
        // Night mode
        brt = 1
    }

    eg_flur_light_dim.sendCommand(brt.toString())

    logWarn("light", "Elevation is " + elev.toString() + ", corridor brightness is " + brt.toString())
end
