
rule "SZ main sw"
when
    Channel "mqtt:topic:openhab:sz_up_remote:action" triggered
then
	var state = receivedEvent

    var curtainPos = 0
    try {
        curtainPos = Integer::parseInt(sz_curtain_cmd.state.toString())
    } catch(Throwable t) {}

    switch(state) {
        case "on": {
            sz_up_light_dim.sendCommand(100)
        }
        case "off": {
            if (sz_up_light_sw.state == ON) {
                sz_up_light_sw.sendCommand(OFF)
            } else {
                sz_up_light_dim.sendCommand(1)
            }
        }
        case "arrow_right_click": {
            sz_bed_light_dim.sendCommand(75)
        }
        case "arrow_right_hold": {
            if (100 != curtainPos) {
                sz_curtain_cmd.sendCommand("close")
            }
            sz_bed_light_sw.sendCommand(ON)
            sz_bed_light_dim.sendCommand(50)
            Thread::sleep(3000)
            fl_light.sendCommand(OFF)
            sz_up_light_sw.sendCommand(OFF)
        }
        // Exit
        case "arrow_left_click": {
            sz_light.sendCommand(OFF)
        }
    }
end

rule "SZ main dimmer"
when
    Channel "mqtt:topic:openhab:sz_up_remote:action_dim" triggered
then
    if (sz_up_light_sw.state == ON) {
        sz_up_light_dim_fast.sendCommand((sz_up_light_dim_fast.state as Number) + Integer::parseInt(receivedEvent))
    }
    if (sz_bed_light_sw.state == ON) {
        sz_bed_light_dim_fast.sendCommand((sz_bed_light_dim_fast.state as Number) + Integer::parseInt(receivedEvent))
    }
end

rule "SZ door bed sw"
when
    Channel "mqtt:topic:openhab:sz_door_bed_remote:action" triggered
then
	var state = receivedEvent
    switch(state) {
        // Night mode: red, 100%
        case "on": {
            var redColor = new HSBType(new DecimalType(0), new PercentType(100), new PercentType(100))
            sz_bed_floor_light_color.sendCommand(redColor.toString())
        }
        // Night mode: red, 20%
        case "off": {
            var redColor = new HSBType(new DecimalType(0), new PercentType(100), new PercentType(20))
            sz_bed_floor_light_color.sendCommand(redColor.toString())
        }
    }
end

rule "SZ main sw (bed)"
when
    Channel "mqtt:topic:openhab:sz_bed_l_remote:action" triggered
    or Channel "mqtt:topic:openhab:sz_bed_r_remote:action" triggered
then
	var state = receivedEvent
    switch(state) {
        case "toggle": {
            // Обновление 2023-09-29: выключить всё
            all_light.sendCommand(OFF)
        }
        // Volume hold: normal bed lights
        case "volume_up_hold": {
            sz_bed_light_dim.sendCommand(100)
        }
        case "volume_down_hold": {
            if (sz_light.state == ON && sz_bed_light_dim.state < 10) {
                sz_light.sendCommand(OFF)
            } else {
                sz_bed_light_dim.sendCommand(1)
            }
        }
        // Volume press: floor fill light
        case "volume_up": {
            var redColor = new HSBType(new DecimalType(0), new PercentType(100), new PercentType(100))
            sz_bed_floor_light_color.sendCommand(redColor.toString())
        }
        case "volume_down": {
            var redColor = new HSBType(new DecimalType(0), new PercentType(100), new PercentType(20))
            sz_bed_floor_light_color.sendCommand(redColor.toString())
        }
        // Control Blinds
        case "track_next": {
            if (sz_shutter_mov.state == "STOP") {
                sz_blinds_cmd.sendCommand("open")
            } else {
                sz_blinds_cmd.sendCommand("stop")
            }
        }
        case "dots_2_initial_press": {
            if (sz_shutter_mov.state == "STOP") {
                sz_blinds_cmd.sendCommand("close")
            } else {
                sz_blinds_cmd.sendCommand("stop")
            }
        }
        // Control Curtains
        case "track_previous": {
            if (sz_curtain_state.state == "stop") {
                sz_curtain_cmd.sendCommand("open")
            } else {
                sz_curtain_cmd.sendCommand("stop")
            }
        }
        case "dots_1_initial_press": {
            if (sz_curtain_state.state == "stop") {
                sz_curtain_cmd.sendCommand("close")
            } else {
                sz_curtain_cmd.sendCommand("stop")
            }
        }
    }
end

rule "SZ remote curtain"
when
    Channel "mqtt:topic:openhab:sz_curtain_remote:action" triggered
then
	var state = receivedEvent
    sz_curtain_cmd.sendCommand(state)
end
