rule "Yeelight 1 power"
when
    Item yel_rgb_sw changed
then
	executeCommandLine("yeecli --ip mi-lamp-1.pws -e smooth -d 500 turn " + yel_rgb_sw.state.toString.toLowerCase)
end

rule "Yeelight 1 brightness"
when
    Item yel_rgb_brightness changed
then
	yel_rgb_sw.sendCommand(ON)
	executeCommandLine("yeecli --ip mi-lamp-1.pws -e smooth -d 500 brightness " + (yel_rgb_brightness.state as DecimalType).intValue)
end

rule "Yeelight 1 color temp"
when
    Item yel_rgb_temp changed
then
	yel_rgb_sw.sendCommand(ON)
	executeCommandLine("yeecli --ip mi-lamp-1.pws -e smooth -d 500 temperature " + (yel_rgb_temp.state as DecimalType).intValue)
end

rule "Yeelight 1 color"
when
    Item yel_rgb_color changed
then
	logInfo("LED", "Color changing: " + yel_rgb_color.state)
		
	var hsbValue = yel_rgb_color.state as HSBType
	
	var redValue   = String.format("%02X", (hsbValue.red.floatValue * 2.55) as int)
	var greenValue = String.format("%02X", (hsbValue.green.floatValue * 2.55) as int)
	var blueValue  = String.format("%02X", (hsbValue.blue.floatValue * 2.55) as int)
	
	executeCommandLine("yeecli --ip mi-lamp-1.pws -e smooth -d 500 rgb " + redValue + greenValue + blueValue)
	
	val brightness = hsbValue.brightness.intValue
	yel_rgb_brightness.sendCommand(brightness)
end

rule "mi-lamp-2.pws power"
when
    Item yel_white_1_sw received command
then
	executeCommandLine("yeecli --ip mi-lamp-2.pws -e smooth -d 500 turn " + receivedCommand.toString.toLowerCase)
end

rule "mi-lamp-2.pws brightness"
when
    Item yel_white_1_brightness changed
then
	yel_white_1_sw.postUpdate(ON)
	executeCommandLine("yeecli --ip mi-lamp-2.pws -e smooth -d 500 brightness " + (yel_white_1_brightness.state as DecimalType).intValue)
end

rule "mi-lamp-2.pws color temp"
when
    Item yel_white_1_temp changed
then
	yel_white_1_sw.postUpdate(ON)
	executeCommandLine("yeecli --ip mi-lamp-2.pws -e smooth -d 500 temperature " + (yel_white_1_temp.state as DecimalType).intValue)
end

