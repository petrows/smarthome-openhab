var Timer verlassenTimer = null
var Timer bz_light_timer = null

rule "Spiegel control SW"
when
    Channel "mqtt:topic:openhab:mirror_remote:action" triggered
then
	var state = receivedEvent
    switch(state) {
        case "toggle": {
            if (snf_eg_fl_spiegel.state != ON) {
                snf_eg_fl_spiegel.sendCommand(ON)
            } else {
                snf_eg_fl_spiegel.sendCommand(OFF)
            }
        }
        case "brightness_up_click": {
            var brightness = snf_eg_fl_spiegel_brightness.getState as Number

            brightness = brightness + 30;
            if (brightness > 80) { brightness = 100; }

            snf_eg_fl_spiegel_brightness.sendCommand(brightness)
        }
        case "brightness_down_click": {
            var brightness = snf_eg_fl_spiegel_brightness.getState as Number

            brightness = brightness - 30;
            if (brightness < 10) { brightness = 1; }

            snf_eg_fl_spiegel_brightness.sendCommand(brightness)
        }
        case "arrow_left_click": {
            // kg_light.sendCommand(OFF)
        }
        case "arrow_right_click": {
            // kg_light.sendCommand(OFF)
        }
    }
end

rule "House verlassen SW"
when
    Channel "mqtt:topic:openhab:eg_leave_switch:action" triggered
then
	var state = receivedEvent

    logWarn("light", "Verlassen SW: " + state)

    verlassenTimer = createTimer(now.plusSeconds(20), [ |
        logWarn("light", "Verlassen all OFF")
        all_light.sendCommand(OFF)
    ])

    // Set all except treppe oben
    all_light.members.forEach [s |
        if (s == tr_up_light_sw) {
            // s.sendCommand(ON)
            // Set Ladder lamp ON and 100%
            tr_up_light_dim.sendCommand(100)
        } else {
            s.sendCommand(OFF)
        }
    ]

    // Diff by buttons
    switch(state) {

        // Someone in house?
        case "on": {
            // Do nothing
        }

        // Nobody in house
        case "off": {
            if (cfgHeatingEnable.state == ON) {
                g_hz_all.sendCommand(cfgHeatingTempOff.state as Number)
            }
        }
    }

     // Check that PC is off and turn off also sockets there
    desktop_petro_power_try.sendCommand(OFF)

end

rule "KG Ladder BOTTOM btn"
when
    Channel "mqtt:topic:openhab:tr_down_switch:action" triggered
then
	var state = receivedEvent
    switch(state) {
        case "on": {
            tr_manual_sw.sendCommand(ON)
            tr_light_dim.sendCommand(100)
        }
        case "off": {
            tr_light.sendCommand(OFF)
            g_light_lager_auto.sendCommand(OFF) // Lager licht also OFF
            kg_lager1_main_light.sendCommand(OFF)
            kg_lager3_main_light.sendCommand(OFF)
            kg_lager4_main_light.sendCommand(OFF)
        }
        // Left arrow: turn off all light in KG rooms
        case "arrow_left_click": {
            kg_light_hobbyraum.sendCommand(OFF)
        }
        // Right arrow: turn on desktop (+pc)
        case "arrow_right_click": {
            desktop_petro_power_try.sendCommand(ON)
            kg_light_desktop_dim.sendCommand(25)
            desktop_petro_light_dim.sendCommand(100)
        }
        // Turn OFF EG light
        case "brightness_move_down": { // Long press DOWN
            eg_light.sendCommand(OFF)
        }
    }
end

rule "KG Ladder UP btn"
when
    Channel "mqtt:topic:openhab:tr_up_switch:action" triggered
then
	var state = receivedEvent
    switch(state) {
        case "on": {
            eg_light_auto_dim.sendCommand(100)
        }
        // Turn OFF EG light
        case "off": {
            eg_light.sendCommand(OFF)
        }
        case "brightness_move_up": { // Long press UP
            tr_manual_sw.sendCommand(ON)
            tr_light_dim.sendCommand(100)
        }
        case "brightness_move_down": { // Long press DOWN
            // Up button switches ALL light in KG
            kg_light.sendCommand(OFF)
            // Check that PC is off and turn off also sockets there
            desktop_petro_power_try.sendCommand(OFF)
        }
    }
end

rule "KG Lager corridor btn"
when
    Channel "mqtt:topic:openhab:kg_lager4_switch:action" triggered
then
	var state = receivedEvent
    switch(state) {
        case "on": {
            kg_lager4_manual_sw.sendCommand(ON)
            sendCommand(g_dim_lager_auto, 100)
        }
        case "off": {
            sendCommand(g_light_lager_auto, OFF)
            sendCommand(kg_lager1_main_light, OFF)
            sendCommand(kg_lager3_main_light, OFF)
            sendCommand(kg_lager4_main_light, OFF)
        }
    }
end

rule "Petro desktop remote"
when
    Channel "mqtt:topic:openhab:desktop_petro_remote:action" triggered
then
	var state = receivedEvent

    // any evebt turs on table power
    desktop_petro_power_try.sendCommand(ON)

    switch(state) {
        case "toggle": {
            if (kg_light_desktop.state == ON) {
                kg_light_desktop.sendCommand(OFF)
            } else {
                kg_light_desktop.sendCommand(ON)
            }
        }
        case "arrow_right_click": {
            kg_light_desktop_dim.sendCommand(100)
            desktop_petro_light_dim.sendCommand(100)
        }
        case "arrow_left_click": {
            kg_light_desktop_dim.sendCommand(25)
            desktop_petro_light_dim.sendCommand(100)
        }
        case "brightness_down_click": {
            kg_light.members.forEach [s |
                if (
                    s != desktop_petro_light_sw
                    && s != desktop_petro_up_light_1_sw
                    && s != desktop_petro_up_light_2_sw
                    && s != desktop_petro_up_light_3_sw
                ) {
                    s.sendCommand(OFF)
                }
            ]
        }
        case "brightness_up_click": {
            kg_light_auto.members.forEach [s |
                if (s != desktop_petro_light_sw) {
                    s.sendCommand(ON)
                }
            ]
        }
    }
end

rule "KS remote sw"
when
    Channel "mqtt:topic:openhab:ks_light_switch:action" triggered
then
	var state = receivedEvent
    switch(state) {
        case "on": {
            ks_up_light_dim.sendCommand(100)
        }
        case "off": {
            if (ks_light.state == ON) {
                ks_light.sendCommand(OFF)
            } else {
                ks_up_light_dim.sendCommand(1)
            }
        }
        case "arrow_right_click": {
            ks_up_light_ct.sendCommand(100)
        }
        case "arrow_left_click": {
            ks_up_light_ct.sendCommand(1)
        }
    }
end

rule "KS remote dimmer"
when
    Channel "mqtt:topic:openhab:ns_light_switch:action_dim" triggered
then
    ks_up_light_dim_fast.sendCommand((ks_up_light_dim_fast.state as Number) + Integer::parseInt(receivedEvent))
end

rule "KU Arbeitlicht SW (Spule)"
when
    Channel "mqtt:topic:openhab:ku_light_switch_spule:action" triggered
then
	var state = receivedEvent
    switch(state) {
        case "single": {
            if (ku_light_switch_arbeit_sw.state == ON) {
                ku_light_switch_arbeit_sw.sendCommand(OFF)
            } else {
                ku_light_switch_arbeit_sw.sendCommand(ON)
            }
        }
        case "hold": {
            if (ku_light_switch_haupt_sw.state == ON) {
                ku_light_switch_haupt_sw.sendCommand(OFF)
            } else {
                ku_light_switch_haupt_sw.sendCommand(ON)
            }
        }
    }
end

rule "KU Arbeitlicht SW (Kochfeld)"
when
    Channel "mqtt:topic:openhab:ku_light_switch_kochfeld:action" triggered
then
	var state = receivedEvent
    switch(state) {
        case "toggle": {
            if (ku_light_switch_arbeit_sw.state == ON) {
                ku_light_switch_arbeit_sw.sendCommand(OFF)
            } else {
                ku_light_switch_arbeit_sw.sendCommand(ON)
            }
        }
        case "brightness_up_click": {
            ku_light_switch_haupt_sw.sendCommand(ON)
        }
        case "brightness_down_click": {
            ku_light_switch_haupt_sw.sendCommand(OFF)
        }
    }
end

rule "KU table dimmer"
when
    Channel "mqtt:topic:openhab:ku_light_table_switch:action_dim" triggered
then
    var delta = Integer::parseInt(receivedEvent)
    if (ku_light_table_sw.state == ON) {
        ku_light_table_dim_fast.sendCommand((ku_light_table_dim_fast.state as Number) + delta)
    }
end

rule "KU table switch"
when
    Channel "mqtt:topic:openhab:ku_light_table_switch:action" triggered
then
	var state = receivedEvent
    switch(state) {
        case "on": {
            ku_light_table_dim.sendCommand(100)
        }
        case "off": {
            if (ku_light_table_sw.state == OFF) {
                ku_light_table_dim.sendCommand(30)
            } else {
                ku_light_table_sw.sendCommand(OFF)
            }
        }
        case "arrow_left_click": {
            if (bk_light.state == OFF) {
                bk_light.sendCommand(ON)
                bk_light_dim.sendCommand(100)
            } else {
                bk_light.sendCommand(OFF)
            }
        }
        case "arrow_right_click": {
            if (ku_up_light.state == OFF) {
                ku_light_switch_haupt_sw.sendCommand(ON)
            } else {
                ku_up_light.sendCommand(OFF)
            }
        }
    }
end


rule "Garten wasser remote"
when
    Channel "mqtt:topic:openhab:garten_wasser_remote:action" triggered
then
	var state = receivedEvent
    switch(state) {
        case "on": {
            garten_wasser_sw.sendCommand(ON)
        }
        case "off": {
            garten_wasser_sw.sendCommand(OFF)
        }
    }
end

// BZ: Mirror switch

rule "BZ mirror switch"
when
    Channel "mqtt:topic:openhab:bz_mirror_switch:action" triggered
then
    var state = receivedEvent
    switch(state) {
        case "on": {
            bz_mirror.sendCommand(ON)
        }
        case "brightness_move_up": {
            bz_up_light.sendCommand(ON)
            g_light_bz_dim.sendCommand(100)
        }
        case "off": {
            bz_mirror.sendCommand(OFF)
        }
        case "brightness_move_down": {
            bz_up_light.sendCommand(OFF)
        }
    }
end

// BZ Main control button
// Livarno Home LED ceiling light

rule "BZ main switch"
when
    Channel "mqtt:topic:openhab:bz_light_switch:action" triggered
then
    var state = receivedEvent
    switch(state) {
        case "on": {
            // "up" -> Full power
            bz_light_ct.sendCommand(astro_color_value.state.toString)
            g_light_bz_dim.sendCommand(100)
            bz_light_ct.sendCommand(astro_color_value.state.toString)
        }
        case "off": {
            // "down" -> Small power
            bz_light_color.sendCommand("0,100,50")
            // Start from minimal to avoid flicker
            bz_light_1_dim_fast.sendCommand(1)
            bz_light_2_dim_fast.sendCommand(1)
            bz_light_color.sendCommand("0,100,50")
            bz_light_1_dim.sendCommand(50)
            bz_light_2_dim.sendCommand(10)
        }
        case "arrow_left_click": {
            if (bz_mirror.state == ON) {
                bz_mirror.sendCommand(OFF)
            } else {
                bz_mirror.sendCommand(ON)
            }
        }
        case "arrow_right_click": {
            bz_light.sendCommand(OFF)
        }
    }
end

rule "BZ main dimmer"
when
    Channel "mqtt:topic:openhab:bz_light_switch:action_dim" triggered
then
    g_light_bz_dim_fast.sendCommand((g_light_bz_dim_fast.state as Number) + Integer::parseInt(receivedEvent))
end
