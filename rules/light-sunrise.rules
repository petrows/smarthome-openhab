// Sinrise emulation

// === Configuration

// How long full programm runs (seconds)

val sunriseBrightPeriod = 60 * 60

// Persentage to be change on each step
// Inrease this value to reduce command traffic, decrease for better smooth

val sunriseBrightPeriodStep = 1

// === Configuration

// Global vars
var Timer sunriseTimer = null
var sunriseStarted = false
var sunriseBrightness = 0
var sunriseModeValue = 0

rule "Sinrise emulation auto off"
when
    Channel 'astro:sun:home:daylight#event' triggered START
then
    logWarn("light", "Sunrise emulation daylight switch off")

    if (light_sunrise_enabled.state == OFF) {
        logWarn("light", "Sunrise emulation disabled")
        return
    }

    g_light_eg_sz_night.sendCommand(OFF)
end

rule "Sinrise emulation start"
when
    Time cron "0 00 05 ? * MON-FRI"
    or Item test_sw_check_sunrize received update
then
    logWarn("light", "Sunrise emulation started")

    if (light_sunrise_enabled.state == OFF) {
        logWarn("light", "Sunrise emulation disabled")
        return
    }

    sunriseBrightness = 0;
    sunriseStarted = false;

    sunriseTimer = createTimer(now, [ |

        if (sunriseStarted) {
            if (g_light_eg_sz_night.state == OFF) {
                logWarn("light", "Sunrise emulation stopped: group switched off")
                return
            }
            if (light_sunrise_enabled.state == OFF) {
                logWarn("light", "Sunrise emulation disabled")
                return
            }
        }

        sunriseStarted = true

        // Items to set ON
        // Direct usage of group is problematic, because openHab do not keeps items order
        // Option 1: use manual group (check that it is in sync of "stop-detection" group members)
        // var lightGroupItems = newArrayList(yel_white_1_brightness, ikea_led_007b_brightness, ikea_led_2203_brightness, ikea_led_2819_brightness)
        // Option 2: use group and sort it
        // var lightGroupItems = java.util.Collections.sort(g_light_eg_sz_night.members.map(name))

        // We do not use groups, we must have exact order of lamps defined
        var lightGroupItems = newArrayList(
            "snf_eg_fl_spiegel_brightness",
            "yel_white_1_brightness",
            "sz_declamp_3_dim",
            "sz_declamp_2_dim",
            "sz_declamp_1_dim"
        )

        // Sort items
        // lightGroupItems = lightGroupItems.sortBy[1]

        // Calculate timer
        var brightTimerMs = (sunriseBrightPeriod * 1000) / ( (100 / sunriseBrightPeriodStep) * lightGroupItems.size)

        sunriseModeValue = sunriseBrightness

        lightGroupItems.forEach [s |

            var setBright = sunriseModeValue
            sunriseModeValue = sunriseModeValue - 100

            // If current bright position out of range - we should check other item
            if (setBright < 0 || setBright > 100) {
                return
            }

            logWarn("light", "Sunrise item " + s + " -> " + setBright)
            sendCommand(s, setBright.toString())
        ]

        // All items 100% ?
        if (sunriseBrightness > (lightGroupItems.size * 100)) {
            sunriseTimer = null
            logWarn("light", "Sunrise emulation done")
        } else {
            // New timer loop
            sunriseBrightness = sunriseBrightness + sunriseBrightPeriodStep
            sunriseTimer.reschedule(now.plusMillis(brightTimerMs))
        }
    ])
end
