var Boolean nachtModeTest = false

rule "Ligth master mode"
when
    Item light_all_mode received command
then
    switch (receivedCommand) {
        case "ON": {
            g_light_all.sendCommand(ON)
        }
        case "OFF": {
            g_light_all.sendCommand(OFF)
        }
        case "N": {
            g_light_all.members.forEach [s |
                if (s != sz_declamp_1_sw) {
                    s.sendCommand(OFF)
                }
            ]
            sz_declamp_1_dim.sendCommand(0)
        }
    }
end

rule "Ligth master mode status"
when
    Item g_light_all received update
then
    switch (g_light_all.state) {
        case OFF: {
            light_all_mode.postUpdate("OFF")
        }
        case ON: {
            nachtModeTest = true

            // Check if any light is ON and NOT in night group -> no night mode
            g_light_all.members.forEach [s |
                if (s.state == ON && !s.getGroupNames.contains("g_light_eg_sz_night")) {
                    nachtModeTest = false
                }
            ]

            if (nachtModeTest) {
                light_all_mode.postUpdate("N")
            } else {
                light_all_mode.postUpdate("ON")
            }
        }
    }
end

rule "Light safe switch"
when
	Time cron "0 00 03,04 ? * *"
then
	logWarn("light", "Set safe off")
	g_light_all.sendCommand(OFF)

    // Check that PC is off and turn off also sockets there
    if (online_petro_pc.state == OFF) {
        desktop_petro_power_sw.sendCommand(OFF)
    }
end

rule "BZ force both lights work together 1"
when
    Item snf_eg_bz_1 changed
then
    var state = snf_eg_bz_1.state
    if (snf_eg_bz_2.state != state) { sendCommand(snf_eg_bz_2, state) }
end

rule "BZ force both lights work together 2"
when
    Item snf_eg_bz_2 changed
then
    var state = snf_eg_bz_2.state
    if (snf_eg_bz_1.state != state) { sendCommand(snf_eg_bz_1, state) }
end
