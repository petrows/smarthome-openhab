var Boolean nachtModeTest = false

rule "Ligth master mode"
when
    Item light_all_mode received command
then
    switch (receivedCommand) {
        case "ON": {
            g_light_all.sendCommand(ON)
        }
        case "OFF": {
            g_light_all.sendCommand(OFF)
        }
        case "N": {
            g_light_all.members.forEach [s |
                if (s != sz_declamp_1_sw) {
                    s.sendCommand(OFF)
                }
            ]
            sz_declamp_1_dim.sendCommand(0)
        }
    }
end

rule "Ligth master mode status"
when
    Item g_light_all received update
then
    switch (g_light_all.state) {
        case OFF: {
            light_all_mode.postUpdate("OFF")
        }
        case ON: {
            nachtModeTest = true

            // Check if any light is ON and NOT in night group -> no night mode
            g_light_all.members.forEach [s |
                if (s.state == ON && !s.getGroupNames.contains("g_light_eg_sz_night")) {
                    nachtModeTest = false
                }
            ]

            if (nachtModeTest) {
                light_all_mode.postUpdate("N")
            } else {
                light_all_mode.postUpdate("ON")
            }
        }
    }
end

rule "Light safe switch"
when
	Time cron "0 00 03,04 ? * *"
then
	logWarn("light", "Set safe off")
	g_light_all.sendCommand(OFF)

    // Stop decorative lights
    g_light_christmas.sendCommand(OFF)

    // Check that PC is off and turn off also sockets there
    desktop_petro_power_try.sendCommand(OFF)
end

rule "KG safe switch"
when
	Time cron "0 00 00,01,02 ? * *"
then
	logWarn("light", "Set safe off (KG version)")

    // All light in KG off
	g_light_kg.sendCommand(OFF)

    // Stop decorative lights
    g_light_christmas.sendCommand(OFF)

    // Check that PC is off and turn off also sockets there
    desktop_petro_power_try.sendCommand(OFF)
end

rule "NS follow table power"
when
    Item snf_eg_ns_table changed
then
    ns_power_2_sw.sendCommand(newState)
end

rule "BZ force both lights work together"
when
       Item snf_eg_bz_1 changed
    or Item snf_eg_bz_2 changed
then
    g_light_eg_bz.sendCommand(newState.toString())
end

// Christmas lights auto
rule "Sunset Rule"
when
    Channel "astro:sun:home:civilDusk#event" triggered START
then
    logWarn("light", "Sunset Rule")
    g_light_christmas.sendCommand(ON)
end

// Petro desktop power control
rule "Petro desktop power"
when
    Item desktop_petro_power_try received update
then
    logWarn("light", "Petro desktop power: " + newState)

    if (newState == ON) {
        desktop_petro_aux_power_sw.sendCommand(ON)
        // Start PC with some delay
        Thread::sleep(100)
        desktop_petro_pc_power_sw.sendCommand(ON)
        return
    }

    if (newState == OFF) {
        createTimer(now.plusSeconds(60), [|
            logWarn("light", "Petro delayed power off check, PC status is " + online_petro_pc.state)
            if (online_petro_pc.state == ON) {
                desktop_petro_power_try.setState(ON) // Decline state change
                return
            }

            desktop_petro_aux_power_sw.sendCommand(OFF)
            Thread::sleep(100)
            desktop_petro_pc_power_sw.sendCommand(OFF)
        ])
        return
    }
end
