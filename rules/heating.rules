// import java.util.Date
import org.eclipse.xtext.xbase.lib.Functions

val tempOff = 4.5
val tempIdle = 17
val tempHeat = 21

val roomCabinet = "CABINET"
val roomKitchen = "KITCHEN"
val roomLiving = "LIVING"
val roomSleeping = "SLEEPING"

val roomCabinetId = 0
val roomKitchenId = 1
val roomLivingId = 2
val roomSleepingId = 3

//var heatingAutoTemps = newArrayList(maxCabinetTempAuto, maxKitchenTempAuto, maxLivingTempAuto, maxSleepingTempAuto)
//var heatingSetTemps = newArrayList(maxCabinetTempSet, maxKitchenTempSet, maxLivingTempSet, maxSleepingTempSet)
//var heatingWindowState = newArrayList(windowKitchenOpen, windowKitchenOpen, windowLivingOpen, windowSleepingOpen)

val Functions$Function2<String, Number, Boolean> setAutoTemp= [ roomID, roomTemp |

	var GenericItem itemSet;
	var GenericItem itemAutoTemp;
	var GenericItem itemMode;
	var GenericItem itemWindowState;
	
	val tempOff = 4.5
	val tempIdle = 17
	val tempHeat = 21
	
	switch roomID {		
		case "CABINET" : {
			itemAutoTemp = maxCabinetTempAuto
			itemSet = maxCabinetTempSet
			itemMode = maxCabinetMode
			itemWindowState = windowKitchenOpen
		}
		case "KITCHEN" : {
			itemAutoTemp = maxKitchenTempAuto
			itemSet = maxKitchenTempSet
			itemMode = maxKitchenMode
			itemWindowState = windowKitchenOpen
		}
		case "LIVING" : {
			itemAutoTemp = maxLivingTempAuto
			itemSet = maxLivingTempSet;
			itemMode = maxLivingMode;
			itemWindowState = windowLivingOpen
		}
		case "SLEEPING" : {
			itemAutoTemp = maxSleepingTempAuto
			itemSet = maxSleepingTempSet
			itemMode = maxSleepingMode
			itemWindowState = windowSleepingOpen
		}
		
		default : {
			logError("setAutoTemp", "Unknown roomID " + roomID)
			return false;
		}
	}
	
	// Save current AUTO value
	itemAutoTemp.sendCommand(roomTemp);
	
	logWarn("setAutoTemp", "Item state = " + itemSet.state)
	
	if (cfgHeatingEnable.state != ON || cfgHeatingAutoEnable.state != ON) {
		logWarn("setAutoTemp", "Heating disabled")
		if (itemMode.state != "MANUAL") {
			itemMode.sendCommand("MANUAL");
		}
		if (itemSet.state != tempOff) {
			itemSet.sendCommand(tempOff);
		}
		return false;
	}
	
	if (presAll.state != ON && cfgPersistanceEnable.state = ON) {
		logWarn("setAutoTemp", "Heating disabled - no one at home")
		if (itemMode.state != "MANUAL") {
			itemMode.sendCommand("MANUAL");
		}
		if (itemSet.state != tempOff) {
			itemSet.sendCommand(tempOff);
		}
		return false;
	}
	
	if (itemWindowState.state == ON) {
		logWarn("setAutoTemp", "Room " + roomID + " skip apply due to window OPEN")
		return false;
	}
	
	logInfo("setAutoTemp", "Set auto temp " + roomTemp + "Â°C to room " + roomID);
	
	if (itemMode.state != "MANUAL") {
		itemMode.sendCommand("MANUAL");
	}
	
	itemSet.sendCommand(roomTemp);
	
	return true;
]

val Functions$Function2<GenericItem, Number, Boolean> applyAutoMode= [ valveItem, valveTemp |

	logInfo("applyAutoMode", "Set saved AUTO temp " + valveTemp + " to " + valveItem.name)
	
	if (cfgHeatingEnable.state != ON) {
		logWarn("applyAutoMode", "Heating disabled")
		valveItem.sendCommand(4.5)
		return true;
	}

	valveItem.sendCommand(valveTemp)

	return true;
]

rule "Heating NIGHT"
when
	Time cron "0 00 22,00,01 ? * *"
then
	logWarn("heating", "Set NIGHT")
	
	setAutoTemp.apply(roomCabinet, tempOff)
	setAutoTemp.apply(roomKitchen, tempOff)
	setAutoTemp.apply(roomLiving, tempOff)
	setAutoTemp.apply(roomSleeping, tempOff)
end

// === WORKDAYS ==========================================

rule "Heating (workdays) MORNING"
when
	Time cron "0 00 5 ? * MON-FRI"
then
	logWarn("heating", "Set (workdays) MORNING")
	
	setAutoTemp.apply(roomCabinet, tempIdle)
	setAutoTemp.apply(roomKitchen, tempHeat)
	setAutoTemp.apply(roomLiving, tempHeat)
	setAutoTemp.apply(roomSleeping, tempHeat)
end

rule "Heating (workdays) DAY"
when
	Time cron "0 00 7 ? * MON-FRI"
then
	logWarn("heating", "Set (workdays) DAY")
	
	setAutoTemp.apply(roomCabinet, tempIdle)
	setAutoTemp.apply(roomKitchen, tempIdle)
	setAutoTemp.apply(roomLiving, tempIdle)
	setAutoTemp.apply(roomSleeping, tempIdle)
end

rule "Heating (workdays) EVENING"
when
	Time cron "0 00 18 ? * MON-FRI"
then
	logWarn("heating", "Set (workdays) EVENING")
	
	setAutoTemp.apply(roomCabinet, tempHeat)
	setAutoTemp.apply(roomKitchen, tempHeat)
	setAutoTemp.apply(roomLiving, tempHeat)
	setAutoTemp.apply(roomSleeping, tempIdle)
end

// === WEEKEND ==========================================

rule "Heating (weekend) MORNING"
when
	Time cron "0 00 7 ? * SAT,SUN"
then
	logWarn("heating", "Set (weekend) MORNING")
	
	setAutoTemp.apply(roomCabinet, tempIdle)
	setAutoTemp.apply(roomKitchen, tempHeat)
	setAutoTemp.apply(roomLiving, tempIdle)
	setAutoTemp.apply(roomSleeping, tempHeat)
end

rule "Heating (weekend) DAY"
when
	// Item persTest changed or
	Time cron "0 00 10 ? * SAT,SUN"
then
	logInfo("heating", "Set (weekend) DAY")
	
	setAutoTemp.apply(roomCabinet, tempIdle)
	setAutoTemp.apply(roomKitchen, tempIdle)
	setAutoTemp.apply(roomLiving, tempIdle)
	setAutoTemp.apply(roomSleeping, tempIdle)
end

// === WINDOWS =========================================

rule "Window Kitchen"
when
	Item windowKitchenOpen changed
then
	if (windowKitchenOpen.state == ON) {
		maxCabinetTempSet.sendCommand(tempOff);	
		maxKitchenTempSet.sendCommand(tempOff);
	} else {
		applyAutoMode.apply(maxCabinetTempSet, maxCabinetTempAuto.state)
		applyAutoMode.apply(maxKitchenTempSet, maxKitchenTempAuto.state)		
	}
end

rule "Window Living"
when
	Item windowLivingOpen changed
then
	if (windowLivingOpen.state == ON) {
		maxLivingTempSet.sendCommand(tempOff);
	} else {
		applyAutoMode.apply(maxLivingTempSet, maxLivingTempAuto.state)
	}
end

rule "Window Sleeping"
when
	Item windowSleepingOpen changed
then
	if (windowSleepingOpen.state == ON) {
		maxSleepingTempSet.sendCommand(tempOff);
	} else {
		applyAutoMode.apply(maxSleepingTempSet, maxSleepingTempAuto.state)
	}
end

// === MASTER SWITCH =========================================

rule "Heating presense switch"
when
	Item presAll changed
then
	if (cfgPersistanceEnable.state != ON) {
		logInfo("heating", "Presence disabled")
		return;
	}
	
	if (presAll.state == ON) {
		if (cfgHeatingEnable.state == ON && cfgHeatingPersistanceEnable.state == ON) {
			applyAutoMode.apply(maxCabinetTempSet, maxCabinetTempAuto.state)
			applyAutoMode.apply(maxKitchenTempSet, maxKitchenTempAuto.state)
			applyAutoMode.apply(maxLivingTempSet, maxLivingTempAuto.state)
			applyAutoMode.apply(maxSleepingTempSet, maxSleepingTempAuto.state)
			return;
		} else {
			logInfo("heating", "Presence detected, but auto/heating is disabled")
		}
	} else {
		logInfo("heating", "Nobody at home")
	}
	
	maxCabinetTempSet.sendCommand(tempOff);
	maxKitchenTempSet.sendCommand(tempOff);
	maxLivingTempSet.sendCommand(tempOff);
	maxSleepingTempSet.sendCommand(tempOff);
	
end

rule "Heating master switch"
when
	Item cfgHeatingEnable changed
then
	if (cfgHeatingEnable.state == ON) {
		applyAutoMode.apply(maxCabinetTempSet, maxCabinetTempAuto.state)
		applyAutoMode.apply(maxKitchenTempSet, maxKitchenTempAuto.state)
		applyAutoMode.apply(maxLivingTempSet, maxLivingTempAuto.state)
		applyAutoMode.apply(maxSleepingTempSet, maxSleepingTempAuto.state)
	} else {
		maxCabinetTempSet.sendCommand(tempOff);
		maxKitchenTempSet.sendCommand(tempOff);
		maxLivingTempSet.sendCommand(tempOff);
		maxSleepingTempSet.sendCommand(tempOff);
	}
end
