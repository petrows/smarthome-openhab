
// === MISC RULES ==========================================

rule "Heating safe switch"
when
	Time cron "0 00 00,01,02,03,04 ? * *"
then
	logWarn("heating", "Set safe off")
	gHeatingOff.sendCommand(cfgHeatingTempOff.state)
end

// === TIME RULES ==========================================

rule "Heating NIGHT"
when
	Time cron "0 00 22,00,01 ? * *"
then
	logWarn("heating", "Set NIGHT")
	
	heatingTempAuto.sendCommand(cfgHeatingTempOff.state)
end

rule "Heating MORNING"
when
	Time cron "0 00 5 ? * *"
then
	logWarn("heating", "Set MORNING")
	
	heatingTempAuto.sendCommand(cfgHeatingTempHeat.state)
end

rule "Heating DAY"
when
	Time cron "0 00 7 ? * *"
then
	logWarn("heating", "Set DAY")
	
	heatingTempAuto.sendCommand(cfgHeatingTempIdle.state)
end

rule "Heating EVENING"
when
	Time cron "0 00 18 ? * *"
then
	logWarn("heating", "Set EVENING")
	
	heatingTempAuto.sendCommand(cfgHeatingTempIdle.state)
end

// === RULE CONTROLS ==========================================

rule "Auto command"
when
	Item heatingTempAuto changed
then
	if (cfgHeatingEnable.state != ON || cfgHeatingAutoEnable.state != ON) {
		logInfo("heating", "Auto disabled")
		return
	}
	
	// Check perisstance only if setting temp != OFF
	if (heatingTempAuto.state != cfgHeatingTempOff.state) {
		// Check that people are here
		if (cfgHeatingPersistanceEnable.state == ON) {
			if (presAll.state != ON) {
				// Nobody at home, skip auto set
				logInfo("heating", "Nobody at home, skip auto set")
				gHeatingOff.sendCommand(cfgHeatingTempOff.state)
				return
			}
		}
	}
	
	logInfo("heating", "Auto temp -> " + heatingTempAuto.state)
	gHeatingAuto.sendCommand(heatingTempAuto.state)
end

rule "Bad heating switch"
when
	Item maxBathTimerShort changed
then
	logInfo("heating", "Bad heating timer: " + triggeringItem.state)
	
	if (ON == triggeringItem.state) {
		maxBathTempSet.sendCommand(cfgHeatingTempHeat.state)
	} else {
		maxBathTempSet.sendCommand(cfgHeatingTempOff.state)
	}
end

// === HEATING SWITCHES =========================================

rule "Heating presense switch"
when
	Item presAll changed
then
	if (ON != cfgHeatingEnable.state) {
		logInfo("heating", "Heating disabled")
		return
	}

	if (ON != cfgHeatingPersistanceEnable.state && ON == presAll.state) {
		logInfo("heating", "Return-heat is disabled")
		return
	}
	
	logInfo("heating", "Heating switched by presence to " + presAll.state)
	
	if (presAll.state == ON) {
		gHeatingAuto.sendCommand(heatingTempAuto.state)
	} else {
		gHeatingOff.sendCommand(cfgHeatingTempOff.state)
	}
end

rule "Heating master switch"
when
	Item cfgHeatingEnable changed
then
	if (cfgHeatingEnable.state == ON) {
		gHeatingAll.sendCommand(heatingTempAuto.state)
	} else {
		gHeatingOff.sendCommand(cfgHeatingTempOff.state)
	}
end
